//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceConsumer.CalculatorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorService.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoAdd", ReplyAction="http://tempuri.org/ICalculator/DoAddResponse")]
        int DoAdd(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoAdd", ReplyAction="http://tempuri.org/ICalculator/DoAddResponse")]
        System.Threading.Tasks.Task<int> DoAddAsync(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoSubtract", ReplyAction="http://tempuri.org/ICalculator/DoSubtractResponse")]
        int DoSubtract(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoSubtract", ReplyAction="http://tempuri.org/ICalculator/DoSubtractResponse")]
        System.Threading.Tasks.Task<int> DoSubtractAsync(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoMutltiply", ReplyAction="http://tempuri.org/ICalculator/DoMutltiplyResponse")]
        int DoMutltiply(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoMutltiply", ReplyAction="http://tempuri.org/ICalculator/DoMutltiplyResponse")]
        System.Threading.Tasks.Task<int> DoMutltiplyAsync(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoDivide", ReplyAction="http://tempuri.org/ICalculator/DoDivideResponse")]
        int DoDivide(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoDivide", ReplyAction="http://tempuri.org/ICalculator/DoDivideResponse")]
        System.Threading.Tasks.Task<int> DoDivideAsync(int value1, int value2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ServiceConsumer.CalculatorService.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ServiceConsumer.CalculatorService.ICalculator>, ServiceConsumer.CalculatorService.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int DoAdd(int value1, int value2) {
            return base.Channel.DoAdd(value1, value2);
        }
        
        public System.Threading.Tasks.Task<int> DoAddAsync(int value1, int value2) {
            return base.Channel.DoAddAsync(value1, value2);
        }
        
        public int DoSubtract(int value1, int value2) {
            return base.Channel.DoSubtract(value1, value2);
        }
        
        public System.Threading.Tasks.Task<int> DoSubtractAsync(int value1, int value2) {
            return base.Channel.DoSubtractAsync(value1, value2);
        }
        
        public int DoMutltiply(int value1, int value2) {
            return base.Channel.DoMutltiply(value1, value2);
        }
        
        public System.Threading.Tasks.Task<int> DoMutltiplyAsync(int value1, int value2) {
            return base.Channel.DoMutltiplyAsync(value1, value2);
        }
        
        public int DoDivide(int value1, int value2) {
            return base.Channel.DoDivide(value1, value2);
        }
        
        public System.Threading.Tasks.Task<int> DoDivideAsync(int value1, int value2) {
            return base.Channel.DoDivideAsync(value1, value2);
        }
    }
}
